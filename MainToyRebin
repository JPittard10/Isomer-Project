##### import random
import requests
import random
import numpy as np
import pandas as pd
import scipy.signal as scipy
import scipy.optimize as scipyo
import matplotlib.pyplot as plt
import scipy.optimize as optimize
from scipy.signal import find_peaks
from scipy.interpolate import interp1d
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split

#----------- Opens Github Raw File -----------#

github_url = "https://raw.githubusercontent.com/JPittard10/Isomer-Project/refs/heads/main/Trimmed%20and%20Bunched%20Spectrums/A1_Cl37_c10_HPGe_301sec_trimmed.txt"

# ----------------- FUNCTIONS ------------------#










# Name: Sir_Peaks_plotalot
# Purpose : plots a line on the spectrum plot where the peak was identified
# Creator : James Pittard - 29 / FEB / 2025
# Function : sir_peaks_printsalot( the array for where peaks want to be identified, name of the plot where the peak lines will be displayed i.e plot1 )

def sir_peaks_plotalot(plot_array, plot_name):
    plot_peaks, _ = scipy.find_peaks(plot_array, prominence = 1e2)
    plot_peaks_energy = (0.64844 + 0.27383 * np.array((plot_peaks) - 12.5))+6
    for peak in plot_peaks_energy:
        plot_name.axvline(x = peak, color = 'red', alpha = 0.1)
    return(plot_peaks)


# Name: Sir_Peaks_displayalot
# Purpose : displays the energy of the peaks and their respective counts from greatest to largest count, and prints all of the peaks
#           in order from the left to right side of the array
# Creator : James Pittard - 29 / FEB / 2025
# Function : sir_peaks_displayalot( the array for where peaks want to be identified, the name of the array must start with a " ' " and end with a " ' " )

def sir_peaks_displayalot(plot_array, plot_name):
    plot_peaks, _ = scipy.find_peaks(plot_array, prominence = 1e2)
    plot_peaks_energy = (0.64844 + 0.27383 * np.array((plot_peaks) - 12.5))+6
    peak_counts = plot_array[plot_peaks]
    sorted_peaks = np.argsort(peak_counts)[::-1]
    print(f"Sorted Peaks For Plot '{plot_name}'")
    print("Peak Energy (keV) | Counts")
    print("-----------------------------")
    for i in sorted_peaks:
        peak_index = plot_peaks[i]
        formatted_peak_energy = f"{plot_peaks_energy[i]:<17.3f}"
        formatted_counts = f"{plot_array[peak_index]:<10.0f}"
        print(f"{formatted_peak_energy} | {formatted_counts}")
    print("-----------------------------")
    print(f"Peaks For Plot '{plot_name}'")
    print("Peak Energy (keV)")
    for energy in plot_peaks_energy:
        print(f"{energy:<0.3f}")
    print("-----------------------------\n\n")


# Name: plot_func
# Purpose : plot a function
# Creator : James Pittard - 29 / FEB / 2025
# Function : plot_func( x axis data, y axis data, name of the x axis, name of the y axis, title of the plot,
#                      units for the x axis, units for the y axis, color of the plot)

def plot_func(x_axis_data, y_axis_data, x_axis_name, y_axis_name, title_name, x_axis_unit, y_axis_unit, color_type):
    spec_plot = pd.DataFrame({x_axis_name: x_axis_data, y_axis_name: y_axis_data})
    plot = spec_plot.plot(x = x_axis_name, y = y_axis_name, title = title_name,
                          xlabel = x_axis_unit, ylabel = y_axis_unit, color = color_type, figsize = (12,6))
    return(plot)


# -------------- Pulls spectrum out of text file --------------#

response = requests.get(github_url)

data1 = response.text
data1_array = np.array(list(map(int, data1.split())))
bin_array = list(range(1,(len(data1_array)+1)))

Energy_bin = 0.64844 + 0.27383 * np.array((np.array(bin_array)) - 12.5)


#----------- Plots Raw spectrum and peaks -----------#

raw_spec_plot = plot_func(Energy_bin, data1_array, 'Energy', 'Counts', 'Raw Spectrum', 'Energy (keV)', 'Counts', 'blue')
peaks_raw_spec = sir_peaks_plotalot(data1_array, raw_spec_plot)
plt.show()

#------------ rel_height is very important, can be fine tuned more--------#

width, width_heights, left_ips, right_ips = scipy.peak_widths(data1_array, peaks_raw_spec, rel_height=0.035)

#---------peak_remover and exponential fitter require cutting off the
#         linear segment towards the beginning, done manually at the moment--------#




# widths need fine tuning, but working much better now

def peak_remover(peak_array, peaks, left_ips, right_ip, width):
    temp = peak_array
    for i in range(len(peaks)):
        width_bins = np.ceil(width/0.27383)
        peak_index = int(peaks[i])
        left_ips = int(peak_index - (2*(width_bins[i])))
        right_ips = int(peak_index + (2*(width_bins[i])))
        x_range = np.array(range(left_ips, right_ips+1))
        #print(peak_index, left_ips, right_ips, x_range)
        linear_part = np.linspace(peak_array[left_ips], peak_array[right_ips], num= ((right_ips-left_ips)+1))
        print('actual', i, data1_array[left_ips:right_ips+1])
        print('interpolation', i, linear_part)
        int_indices = np.round(x_range).astype(int)
        np.put(temp, x_range, linear_part)
    return(temp)
        
    #return(temp_array)


smoothed = peak_remover(data1_array, peaks_raw_spec, left_ips, right_ips, width)


#--------------Smoothed Spectrum Plot----------------#

coeffs = np.polyfit(Energy_bin, smoothed, deg=3)
poly_func = np.poly1d(coeffs)

poly_fit = poly_func(Energy_bin)

#please = peak_subtraction_background(data1_array, prominence=2.5e4)

smooth_plot = plot_func(Energy_bin, smoothed, 'Energy', 'Counts', 'Background + Exponential Fit', 'Energy (keV)', 'Counts', 'blue')

#plt.plot(Energy_bin, poly_fit)

#-----------Quadratic Fit Plot-----------#



#plt.plot(Energy_bin_fit, exponential_func(Energy_bin_fit, popt[0], popt[1], popt[2]), color='red', label='Exponential Fit')
#plt.legend()

#--------------Linear + Exponential fit (Linear needs manual adjustment at the moment-------------#

plt.figure(4)



#scipyoptimize fit




plt.figure(5)

#####
def gaussian_peak(x, A, mu, sigma):
    """
    Compute the Gaussian peak function.

    Parameters:
    x : float or ndarray
        Input value or array of values.
    A : float, optional
        Amplitude of the peak (default is 1).
    mu : float, optional
        Mean (center of the peak, default is 0).
    sigma : float, optional
        Standard deviation (controls width, default is 1).

    Returns:
    float or ndarray
        The computed Gaussian function value.
    """
    return A * np.exp(-((x - mu) ** 2) / (2 * sigma ** 2))

def peak_inserter(Energy_bin, left_ips, right_ips, peaks, width, data1_array, width_heights):
    num_peaks = len(peaks)
    just_peaks = np.zeros(len(Energy_bin))
    print(peaks)
    for i in range(len(peaks)):
        peak_index = peaks[i]
        peak_height = data1_array[peak_index]
        sd = width[i]/2
        left = peak_index - (2*width[i])
        right = peak_index + (2*width[i])
        x_range = np.array(range(left, right+1))
        print(x_range)

        gaussian_part = gaussian_peak(x_range, peak_height, x_range[2], sd)
        int_indices = np.round(x_range).astype(int)
        np.add.at(just_peaks, int_indices, gaussian_part)
        
        


        #print()
        print(peak_height == gaussian_part[2])
    
    

        
    return just_peaks


#-----------Adding peaks into simulation-----------------#

just_peaks = peak_inserter(Energy_bin, left_ips, right_ips, peaks_raw_spec, width, data1_array, width_heights)

alone_peaks_plot = plot_func(Energy_bin, just_peaks, 'Energy', 'Counts', 'Just Peaks', 'Energy (keV)', 'Counts', 'blue')

#-----------Adding peaks to smoothed plot-----------------#

#model_true or smoothed
model = np.maximum(just_peaks, smoothed)

Base_model_plot = plot_func(Energy_bin, model, 'Energy', 'Counts', 'Base Model', 'Energy (keV)', 'Counts', 'blue')

# noise model needs some work prbably, Taking the avg of 10 models

added_sims = np.zeros(len(model))
for _ in range(10):
    noise = np.random.normal(loc=0, scale = 0.001, size= len(model_true))
    model_noisy = model * (1+ noise)
    added_sims = added_sims + model_noisy
avg_sims = added_sims/10

#-----------Plot of model smeared plot-----------------#

smeared_model_plot = plot_func(Energy_bin, model, 'Energy', 'Counts', 'Model', 'Energy (keV)', 'Counts', 'blue')
sir_peaks_plotalot(model, smeared_model_plot)
plt.show()

#----------- Differece plot-----------------#


#------- Just a Gaussian Smear -----------#

just_smear = data1_array * np.random.normal(.99, 1.01, len(data1_array))
#------------#
difference = (model - data1_array)
avg_diff = np.mean(difference)
std_diff = np.std(difference)
std_diff_array = (difference - avg_diff) / std_diff

Smeared_model_std_plot = plot_func(Energy_bin, std_diff_array, 'Energy', 'Standard Deviation', 'Difference Between Model and Actual Data', 'Energy (keV)', 'Standard Deviation (Ïƒ)', 'blue')
sir_peaks_plotalot(std_diff_array, smeared_model_std_plot)
plt.show()

#-------------------- Difference Histogram ----------------#

#------- Finding Peaks in difference plot -------#

sir_peaks_displayalot(data1_array, 'Base Model')

sir_peaks_displayalot(model_noisy, 'Smeared model')

# do a combined fit, scipyoptimize


